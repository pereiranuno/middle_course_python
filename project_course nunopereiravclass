import pandas as pd

class Event:
    def __init__(self, show, event, timestamp, user_id):
        """
        Initialize an Event object with the given parameters.

        Parameters
        ----------
        show : str
            The name of the show.
        event : str
            The type of event ('start' or 'stop').
        timestamp : int
            The time at which the event occurred.
        user_id : int
            The ID of the user.
        """
        self.show = show
        self.event = event
        self.timestamp = timestamp
        self.user_id = user_id


class EventManager:
    def __init__(self, events):
        
        """
        Initialize an EventManager object with the given events.

        Parameters
        ----------
        events : list of dict
            A list of dictionaries with the following elements:
                - show: str
                - event: str
                - timestamp: int
                - user_id: int

        Returns
        -------
        None
        """

        self.events = [Event(**event) for event in events]
        self.index = 0

    def __iter__(self):
        """
        Returns an iterator for the events managed by this EventManager object.

        Returns
        -------
        iterator
            An iterator over the events managed by this EventManager object.
        """
        return self

    def __next__(self):
        """
        Returns the next event in the sequence of events managed by this EventManager object.

        Returns
        -------
        Event
            The next event in the sequence of events managed by this EventManager object.

        Raises
        ------
        StopIteration
            If the end of the sequence of events has been reached.
        """
        if self.index < len(self.events):
            current_event = self.events[self.index]
            self.index += 1
            return current_event
        else:
            raise StopIteration

    def calculate_active_users_per_show(self):
        """
        Calculate the active users per show in a given list of events.

        Returns
        -------
        dict
            A dictionary with the show names as keys and a set of active user ids as values.

        Raises
        ------
        Exception
            If there is an error when calculating the active users per show.
        """
        
        try:
            active_users_show = {}
            sorted_events = sorted(self.events, key=lambda x: x.timestamp)

            for event in sorted_events:
                if event.event == 'start':
                    if event.show not in active_users_show:
                        active_users_show[event.show] = set()
                    active_users_show[event.show].add(event.user_id)
                elif event.event == 'stop':
                    if event.show in active_users_show and event.user_id in active_users_show[event.show]:
                        active_users_show[event.show].remove(event.user_id)

            return active_users_show
        except Exception as e:
            print(f"Error calculating active users per show: {e}")
            return {}

    def export_active_users_per_show(self, filename):
        """
        Export the active users per show to a CSV file.

        Parameters
        ----------
        filename : str
            The name of the file to export the data to.

        Returns
        -------
        None

        Raises
        ------
        Exception
            If there is an error exporting the data to the file.
        """
        try:
            active_users = self.calculate_active_users_per_show()
            # Convert the active users data to a DataFrame
            data = {
                "Show": list(active_users.keys()),
                "Active Users": [len(users) for users in active_users.values()]
            }
            df = pd.DataFrame(data)

            # Export the DataFrame to a CSV file
            df.to_csv(filename, index=False)
            print(f"Data successfully exported to {filename}")
        except Exception as e:
            print(f"Error exporting active users per show to file: {e}")


def convert_tabular_file_content_to_dictionary(filename) -> list:
    """
    Read a tabular file and convert its content to a list of dictionaries.

    Parameters
    ----------
    filename : str
        The name of the file to read.

    Returns
    -------
    list
        A list of dictionaries, where each dictionary has the following keys:
            - show: str
            - event: str
            - timestamp: int
            - user_id: int

    Raises
    ------
    FileNotFoundError
        If the file is not found.
    ValueError
        If there is an error processing the file.
    Exception
        If an unexpected error occurs while reading the file.
    """
    try:
        with open(filename, "r") as registry_tabular:
            registry_list = []
            registry_fields = ["show", "event", "timestamp", "user_id"]
            for line in registry_tabular.readlines():
                line = line.strip().split("\t")
                registry = {}
                for i in range(len(registry_fields)):
                    registry[registry_fields[i]] = line[i] if registry_fields[i] == "show" or registry_fields[i] == "event" else int(line[i])
                registry_list.append(registry)
            return registry_list
    except FileNotFoundError:
        print(f"Error: The file '{filename}' was not found.")
        return []
    except ValueError as e:
        print(f"Error processing the file '{filename}': {e}")
        return []
    except Exception as e:
        print(f"An unexpected error occurred while reading the file '{filename}': {e}")
        return []


if __name__ == "__main__":
    registry_list = convert_tabular_file_content_to_dictionary("events.tsv")
    if registry_list:
        event_manager = EventManager(registry_list)
        event_manager.export_active_users_per_show("output.csv")

    # Tests using assert
    try:
        # Test 1: Check if events are read correctly from the file
        sample_registry = [
            {"show": "The Witcher", "event": "start", "timestamp": 0, "user_id": 1},
            {"show": "The Witcher", "event": "stop", "timestamp": 1, "user_id": 1}
        ]
        event_manager = EventManager(sample_registry)
        assert len(event_manager.events) == 2, "Test failed: Incorrect number of events in EventManager"

        # Test 2: Check active user calculation
        active_users = event_manager.calculate_active_users_per_show()
        assert active_users == {"The Witcher": set()}, "Test failed: Active users calculation is incorrect"

        # Test 3: Check export function (manual verification needed)
        event_manager.export_active_users_per_show("test_output.csv")
        df = pd.read_csv("test_output.csv")
        assert "The Witcher" in df["Show"].values, "Test failed: Export function did not output correctly"

        print("All tests passed successfully.")
    except AssertionError as e:
        print(e)
